#include <vector>
#include <functional>
#include <set>
#include "grafo.h"
using namespace std;

// Constructor
Graph::Graph(Point* coordenadas, int n){
   if ( n > 0 ){
      points = new Point[n];
      for (int i=0; i<n; ++i){
         points[i] = coordenadas[i];
      }

      matrix = new double*[n];

      for (int i=0; i<n; ++i)
         matrix[i] = new double[n];
      for (int i=0; i<n; ++i){
         for (int j=i; j<n; ++j)
           matrix[i][j] = matrix[j][i] = coordenadas[i].distance(coordenadas[j]);
      }
      size = n;
   }
   else{
      size = 0;
      points = 0;
      matrix = 0;
   }
}

// Destructor
Graph::~Graph(){
   if ( size > 0 ){
      for (int i=0; i<size; ++i)
         delete [] matrix[i];
      delete [] matrix;
   }
}

// Acceso a los datos miembro
Point Graph::getPoint(const int &i) const{
   Point p;
   if ( i >= 0 )
      p = points[i];

   return p;
}


// Estructura que guarda un camino y la cota de su coste
Path path;
struct PathAndCost{
  double cost;
  vector<Point> leftPoints; // Puntos que quedan para cerrar el ciclo
  vector<int> indexes; // Índices en "points[]" de los puntos que tiene el camino
  bool operator< (const PathAndCost& rhs) const {
    return cost < rhs.cost;
  }
  bool operator> (const PathAndCost& rhs) const {
    return cost > rhs.cost;
  }
};


// Suma los valores de rm excluyendo los indices de p
double sum(vector<double> rm, PathAndCost &p){
  double count = 0;
  int j = 0;
  for (int i=0; i < rm.size(); ++i){
    if (i != p.indexes[j])
      count += rm[i];
    else
      j = j < p.indexes.size() - 1 ? j + 1 : j;
  }

  return count;
}

Path path;
struct PathAndCost{
  double cost;
  vector<Point> leftPoints; // Puntos que quedan para cerrar el ciclo
  vector<int> indexes; // Índices en "points[]" de los puntos que tiene el camino
  bool operator< (const PathAndCost& rhs) const {
    return cost < rhs.cost;
  }
  bool operator> (const PathAndCost& rhs) const {
    return cost > rhs.cost;
  }
};



Path Graph::TSP_BB(int& nodes, int& queueMaxSize, int& cuts, int typeEstimate){
   DistanceMatrix dm(matrix, size);
   vector<double> rm = dm.rowMinimums();
   set<PathAndCost, greater<PathAndCost> > liveNodesSet;
   double optSolutionLength;
   insertion(optSolutionLength);
   Path optPath;

   nodes = queueMaxSize = cuts = 0;

   // Genera las permutaciones del primer nivel
   for (int i = 1; i < size; ++i){
     PathAndCost p;
     p.path.addPoint(getPoint(0));
     p.path.addPoint(getPoint(i));
     p.leftPoints = vector<Point>(points, points + size); // conversion a std::vector de points[]
     p.leftPoints.erase(p.leftPoints.begin());
     p.leftPoints.erase(p.leftPoints.begin()+i-1);

     p.indexes.push_back(0);
     p.indexes.push_back(i);

     if (typeEstimate == 1)
         p.cost = sum(rm, p) + p.path.getLength();
     //else if (typeEstimate == 2)
      //   p.cost = p.PartialBound + p.path.getLength();
     //else if (typeEstimate == 3)
      //   p.cost = ... + p.path.getLength();

     liveNodesSet.insert(p);
   }

   while (!liveNodesSet.empty()){
      if (queueMaxSize < liveNodesSet.size())
         queueMaxSize = liveNodesSet.size(); //

      // Desarrollo del nodo con menor coste
      PathAndCost nodeToDevelop = *(liveNodesSet.begin());
      liveNodesSet.erase(liveNodesSet.begin()); // Una vez desarrollado el nodo lo eliminamos para no volver a pasar por él
      for (int i=0; i < nodeToDevelop.leftPoints.size(); ++i){
        PathAndCost p = nodeToDevelop;
        p.path.addPoint(p.leftPoints[i]);
        p.leftPoints.erase(p.leftPoints.begin()+i);
        p.indexes.push_back(i);


        if (typeEstimate == 1)
           p.cost = sum(rm, p) + p.path.getLength();
       //else if (typeEstimate == 2)
        //   p.cost = p.PartialBound + p.path.getLength();
       //else if (typeEstimate == 3)
        //   p.cost = ... + p.path.getLength();


        if (p.path.getNumPoints() == (size-1) && (p.cost < optSolutionLength)){
          p.path.addPoint(p.leftPoints[0]);
          p.path.addPoint(points[0]);

          if (p.path.getLength() < optSolutionLength){
            optSolutionLength = p.path.getLength();
            optPath = p.path;
          }
        }

        liveNodesSet.insert(p);
      }

      for (set<PathAndCost, greater<PathAndCost> >::iterator it = liveNodesSet.begin(); it != liveNodesSet.end(); ++it){
        if ((it->cost >= optSolutionLength && optSolutionLength != 0) || ((*it).path.getNumPoints() == size+1)){
          liveNodesSet.erase(it);
          ++cuts;
        }
      }
   }
   return optPath;
}
