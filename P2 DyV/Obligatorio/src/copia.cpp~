int* ordena_vectores(int* vec1, int* vec2, int tam1, int tam2){
  int* ret = new int[tam1 + tam2];
  int size = tam*tam2, index1 = 0, index2 = 0;
  bool terminado1 = false, terminado2 = false;

  for (int i=0; i<size; ++i){
    if (terminado1){
        ret[i] = vec2[index2];
        ++index2;
    }
    else if (terminado2){
        ret[i] = vec1[index1];
        ++index1;
    }
    else if (vec2[index2] > vec1[index1]){
        ret[i] = vec1[index1];
        ++index1;
    }
    else{
        ret[i] = vec2[index2];
        ++index2;    
    }
    if ((index1+1) == tam1)
        terminado1 = true;
    if ((index2+1) == tam2)
        terminado2 = true;
  }
  return ret;
}

int* Mezcla_DyV(int** vectors, int n_vec, int *n_elem){
  // Caso base: Si hay 2 particiones de igual tamaÃ±o, las mezcla
  if(n_vec == 2)
      vectors[0] = ordena_vectores(vectors[0], vectors[1], n_elem[0], n_elem[1]);
  else if(n_vec > 2){
    while (n_vec != 1){
        for (int i=0; i<n_vec/2; ++i)
          M[i] = ordena_vectores(M[i*2], M[i*2+1], n_elem[i*2], n_elem[i*2+1]);

        if (n_vec % 2 != 0){
            M[n_vec/2] = vectors[n_vec-1];
            vectors[n_vec-1] = 0;
            n_vec = n_vec/2+1;
        }
        else{
                n_vec = n_vec/2;
            for (int i=0; i<n_vec/2; ++i)
                n_elem[i] = n_elem[i*2]*2;
        }
    }
  }
  else
    M = vectors;


  for (int i=0; i<n_vec; ++i)
    delete [] vectors[i];
  delete [] vectors;
  return vectors[0]:
}

int** MezclaDyV(int** vectors, int n_vec, int n_elem){
    int *n_elem_m = new int[n_vec];
    for (int i=0; i<n_vec; ++i)
        n_elem_m[i] = n_elem;
    return Mezcla_DyV(vectors, n_vec, n_elem_m);
}
